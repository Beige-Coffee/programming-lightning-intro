pub async fn get_bitcoind_client() -> BitcoindClient {
  let bitcoind = BitcoindClient::new(
      "0.0.0.0".to_string(),
      18443,
      "bitcoind".to_string(),
      "bitcoind".to_string(),
      Network::Regtest,
  )
  .await
  .unwrap();

  bitcoind
}

pub fn get_funding_input(input_tx_id_str: String, vout: usize) -> TxIn {

    // Get an unspent output to spend
    let mut tx_id_bytes = hex::decode(input_tx_id_str).expect("Valid hex string");
    tx_id_bytes.reverse();
    let input_txid = Txid::from_byte_array(tx_id_bytes.try_into().expect("Expected 32 bytes"));

    // Create a transaction spending this UTXO
    TxIn {
        previous_output: OutPoint {
            txid: input_txid,
            vout: vout as u32,
        },
        sequence: Sequence::MAX,
        script_sig: ScriptBuf::new(),
        witness: Witness::new(),
    }

}

pub async fn get_unspent_output(bitcoind: BitcoindClient) -> TxIn {
  let utxos = bitcoind.list_unspent().await;
  let utxo = utxos
      .0
      .iter()
      .find(|utxo| utxo.amount > 4_999_999 && utxo.amount < 6_000_000)
      .expect("No UTXOs with positive balance found");

    let tx_input = TxIn {
        previous_output: OutPoint {
            txid: utxo.txid,
            vout: utxo.vout,
        },
        sequence: Sequence::MAX,
        script_sig: ScriptBuf::new(),
        witness: Witness::new(),
    };

    tx_input
}

pub fn get_htlc_funding_input(input_tx_id_str: String, vout: usize) -> TxIn {

    // Get an unspent output to spend
    let mut tx_id_bytes = hex::decode(input_tx_id_str).expect("Valid hex string");
    tx_id_bytes.reverse();
    let input_txid = Txid::from_byte_array(tx_id_bytes.try_into().expect("Expected 32 bytes"));

    // Create a transaction spending this UTXO
    TxIn {
        previous_output: OutPoint {
            txid: input_txid,
            vout: vout as u32,
        },
        sequence: Sequence(0),
        script_sig: ScriptBuf::new(),
        witness: Witness::new(),
    }

}

pub fn build_unsigned_input(txid: String, vout: u32, sequence: Sequence) -> TxIn {

    // Get an unspent output to spend
    let mut tx_id_bytes = hex::decode(txid).expect("Valid hex string");
    tx_id_bytes.reverse();
    let input_txid = Txid::from_byte_array(tx_id_bytes.try_into().expect("Expected 32 bytes"));

    TxIn {
        previous_output: OutPoint {
            txid: input_txid,
            vout: vout,
        },
        sequence: sequence,
        script_sig: ScriptBuf::new(),
        witness: Witness::new(),
    }
}